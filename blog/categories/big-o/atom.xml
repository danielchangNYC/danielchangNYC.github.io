<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: big-o | Daniel Chang]]></title>
  <link href="http://danielchangNYC.github.io/blog/categories/big-o/atom.xml" rel="self"/>
  <link href="http://danielchangNYC.github.io/"/>
  <updated>2014-04-25T01:29:02-04:00</updated>
  <id>http://danielchangNYC.github.io/</id>
  <author>
    <name><![CDATA[Daniel Chang]]></name>
    <email><![CDATA[daniel.chang85@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Array Set Intersection: A Rails Use-Case]]></title>
    <link href="http://danielchangNYC.github.io/blog/2014/04/24/set-intersection/"/>
    <updated>2014-04-24T09:51:00-04:00</updated>
    <id>http://danielchangNYC.github.io/blog/2014/04/24/set-intersection</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s some smelly code I wrote for the <a href="http://prework.flatironschool.com/">Flatiron School pre-work</a> progress-tracker app.</p>

<h1>Brittle Methods</h1>

<p>``` ruby
class Progress &lt; ActiveRecord::Base
  belongs_to :topic
  serialize :completed_lessons, Array</p>

<p>  def topic_complete?</p>

<pre><code>topic.total_lessons == completed_lessons.length
</code></pre>

<p>  end
end</p>

<p>class Topic &lt; ActiveRecord::Base
  has_many :progresses
  serialize :lesson_order, Array</p>

<p>  def add_lesson(lesson)</p>

<pre><code>lesson_order &lt;&lt; lesson.id
total_lessons += 1
</code></pre>

<p>  end
end
```</p>

<p><code>add_lesson</code> is brittle. A new coder on this project has to know to add lessons using this method; the design is therefore NOT transparent. There is also a duplication of data: calling <code>lesson_order.length</code> gives you the total number of lessons, making a <code>total_lessons</code> attribute a violation of the DRY principle. It should be a method instead.</p>

<p><code>topic_complete?</code> also felt prone to false positives and negatives. If an admin replaces a lesson, is a completed progress still complete? What about if a lesson is removed? Our method would return false.</p>

<p><strong>I needed a way to actually compare what was in <code>completed_lessons</code> and <code>lesson_order</code>.</strong></p>

<h1>Set Theory in Full Motion</h1>

<p>Set theory review: The intersection of two sets is the set of all common elements. Ruby&rsquo;s Array class has such a method which can be used like an operator: <code>&amp;</code>.</p>

<p>The <a href="http://www.ruby-doc.org/core-2.1.1/Array.html#method-i-26">&amp; operator</a> is called the set intersection operator.</p>

<p><code>ruby example
[ 1, 1, 3, 5 ] &amp; [ 1, 2, 3 ]    #=&gt; [ 1, 3 ]
</code></p>

<h2>Failed Solution, Learned Lesson</h2>

<p><code>ruby
def topic_complete?
  completed_lessons &amp; topic.lesson_order == topic.lesson_order
end
</code></p>

<h3>Why it failed</h3>

<p>``` ruby irb-fiddling
lesson_order = [3, 2, 5]
completed_lessons = [5, 2, 3]</p>

<p>lesson_order &amp; completed_lessons
   # => [3, 2, 5]</p>

<p>completed_lessons &amp; lesson_order
   # => [5, 2, 3]</p>

<p>completed_lessons &amp; lesson_order == lesson_order
   # => false
```</p>

<h2>Win</h2>

<p><code>ruby
def topic_complete?
  topic.lesson_order &amp; completed_lessons == topic.lesson_order
end
</code></p>

<h2>BONUS: The Algorithm Behind the Set Intersection Operator</h2>

<p>I took a a deep dive into Ruby source code to figure this one out. Full disclosure: I&rsquo;ve never read or written C in my life, but with the help of the <a href="http://rxr.whitequark.org/mri/ident">MRI Identifier Search</a>, I was able to piece together how the algorith works.</p>

<p>``` c
 static VALUE
rb_ary_and(VALUE ary1, VALUE ary2)
{</p>

<pre><code>VALUE hash, ary3, v;
st_table *table;
st_data_t vv;
long i;

ary2 = to_ary(ary2);
ary3 = rb_ary_new();
if (RARRAY_LEN(ary2) == 0) return ary3;
hash = ary_make_hash(ary2);
table = rb_hash_tbl_raw(hash);

for (i=0; i&lt;RARRAY_LEN(ary1); i++) {
    v = RARRAY_AREF(ary1, i);
    vv = (st_data_t)v;
    if (st_delete(table, &amp;vv, 0)) {
        rb_ary_push(ary3, v);
    }
}
ary_recycle_hash(hash);

return ary3;
</code></pre>

<p>}
```</p>

<p>The key to understanding this is in the <code>for</code> loop.</p>

<ul>
<li>ary1 and ary2 represent the arrays for which we&rsquo;re finding the intersection. ary3 is what the function <code>rb_ary_and</code> returns.</li>
<li>v represents ary1i]`, in Ruby-speak.</li>
<li>vv is somehow tied to that value.</li>
<li><code>st_delete</code> returns 1 if <code>vv</code> was successfully deleted from <code>table</code>, which really refers to ary2, and 0 if it wasn&rsquo;t found. If it gets deleted, then that means ary2 must have had an element in common; push that element into ary3.</li>
</ul>


<h2>O(x*y)</h2>

<p>In the worst-case scenario, ary1 and ary2 are giant arrays with completely disparate elements, requiring the algorithm to compare all elements of ary2 with all elements of ary1. Given there are <em>x</em> elements in ary1 and <em>y</em> elements in ary2, this would produce a O(x*y).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big O Notation]]></title>
    <link href="http://danielchangNYC.github.io/blog/2014/01/05/big-o/"/>
    <updated>2014-01-05T23:30:00-05:00</updated>
    <id>http://danielchangNYC.github.io/blog/2014/01/05/big-o</id>
    <content type="html"><![CDATA[<p>Big O notation might look something like this: O(log N)</p>

<p><code>
N = number of input data
O( ) = function notation for Big O (just tells you we're using Big O notation)
log N = the function that describes the efficiency of the procedure or algorithm as N grows bigger and bigger
</code></p>

<p>Programmers use Big O Notation as a way to express how efficient an algorithm or procedure is at performing its designated task (e.g. sorting, searching). The function tells us the maximum number of &ldquo;actions&rdquo; it will take for the algorithm to achieve its goal, given N data.</p>

<h2>Example 1: O(N)</h2>

<p>O(N) is the linear case. Given 10 data, the worst-case scenario is that it will take 10 &ldquo;actions&rdquo; to search for a target, or sort the data, or whatever the goal of the algorithm is. Given 100 data, it will take 100 actions. Given 2000 data, it will take 2000 actions. Given N data, it will take N actions.</p>

<p>A real life example would be if you were looking for a book on your friend&rsquo;s bookshelf.</p>

<p><img class="<a" src="href="http://2.bp.blogspot.com/_5PudbMqUjng/TR5Cu-fq4ZI/AAAAAAAAACk/t_oojdxP-c8/s400/harrypotter.jpg">http://2.bp.blogspot.com/_5PudbMqUjng/TR5Cu-fq4ZI/AAAAAAAAACk/t_oojdxP-c8/s400/harrypotter.jpg</a>" width="400"></p>

<p>Lets say you want your program to find any given book. You could tell the program to start checking books one by one from the left. If you wanted Harry Potter 3, it would only take 3 actions (or tries) because it&rsquo;s the third book in. However, Big O tells us the worst-case scenario. What book would cause the algorithm to take the most possible actions? Harry Potter 7 &mdash; it&rsquo;s the last book so the algorithm would have to run all 7 times. Given 7 books, it took the algorithm 7 actions / tries to find the book <em>in the worst case scenario</em>.</p>

<p>What if we ran this algorithm on 10 books? The worst case would take all 10 tries. How about 1,000,000 books? It would take 1 million tries.</p>

<p>So, TL;DR &mdash; O(N) tells us that given N data, it will take an algorithm N actions / tries to accomplish a task.</p>

<h2>Example 2: O(1)</h2>

<p>What does O(1) tell us? The function inside is simply &ldquo;1&rdquo;. This means that no matter what number N is, it will always accomplish the task in 1 try. It represents the most efficient algorithm possible.</p>

<p>Does this exist? Sure it does! But it might not give you exactly what you&rsquo;re looking for. Here&rsquo;s an algorithm that can be described with O(1).</p>

<p><code>ruby
def efficient_but_useless
  return true
end
</code></p>

<p>TL;DR algorithms with O(1) always finish in 1 try.</p>

<h2>Example 3: O(N<sup>2</sup>) or any higher exponent</h2>

<p>Is this an efficient algorithm? In other words, if I input a large amount of data for N, what does that tell me about the algorithm? If I input N=1, then no matter what, it will take 1 try. But if I put in N=10, then it will take 10<sup>2</sup> = 100 actions / tries to complete the algorithm (worst case scenario). Imagine if the exponent were higher, or if N were higher. Then the algorithm would be super inefficient!</p>

<p>What kinds of algorithms would have O(N<sup>2</sup>)? Simply put, algorithms with nested loops usually exhibit this behavior. If you have to run a procedure on each item, and each item has to check itself against every other item in some way, then worst case is that you run the procedure N<sup>2</sup> times. In other words, it takes N<sup>2</sup> actions.</p>

<h2>Example 4: O(log N)</h2>

<p>This time the function is logarithmic.</p>

<p><img class="<a" src="href="http://image.tutorvista.com/content/feed/tvcs/img64.gif">http://image.tutorvista.com/content/feed/tvcs/img64.gif</a>"></p>

<p>Imagine that the x-axis represents N, how much input data you have, and the y-axis tells us how many actions or tries it takes the algorithm to finish (worst case scenario, as usual). As N grows larger, the number of tries grows, but slowly.</p>

<p>Let&rsquo;s try calculating a few examples. Keep in mind that when programmers write log N, it refers to <a href="https://stackoverflow.com/questions/1569702/is-big-ologn-log-base-e">log base 2</a>. Also, since the number of actions has to be a whole number, if you get a decimal, the rule of thumb is to round up. So given 10 data, it will take log(10) = 3.32 which rounds up to 4 actions, max. This isn&rsquo;t that much more efficient than O(N), but what if N=1,000,000? It would take your algorithm log(1000000) = 19.93 which rounds up to 20 tries, max. For 1000000 data, that&rsquo;s pretty efficient!</p>

<p>When would we use a logarithmic function to describe the efficiency of an algorithm? One example is the binary search. The binary search algorithm finds a target value within a set of sorted data by repeating the process below until you&rsquo;re left with one value.</p>

<ol>
<li>Find the middle value. If there is more than one, take the higher value.</li>
<li>Compare the target value with the middle value. If it&rsquo;s equal, then we&rsquo;ve found the target. Otherwise, if the target > middle value, then eliminate all values to the left of the middle (lower than the middle); we know the target is in the half with greater values. If the target is &lt;= middle, eliminate the right.</li>
<li>Repeat steps 1 and 2 on the remaining side. Continue until you are left with one value; this is your target.</li>
</ol>


<p>So let&rsquo;s say this is your data, and you&rsquo;re looking for the value, 4.</p>

<p><code>ruby
data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
target = 4
</code></p>

<ol>
<li>Find the middle value. There are 10 values, thus two middles. Take the higher: 5.</li>
</ol>


<p>``` ruby first_action
middle = 5
[0, 1, 2, 3, 4]; [5, 6, 7, 8, 9]</p>

<h1>left side = [0, 1, 2, 3, 4]</h1>

<h1>right side = [5, 6, 7, 8, 9]</h1>

<p>```</p>

<ol>
<li><p>Compare target with middle. Is it equal to 4? No. Since target &lt;= middle (4 &lt;= 5), eliminate the right side.</p></li>
<li><p>Repeat steps 1 and 2 on the left side. We&rsquo;ll keep doing this until we find the target value, 4.</p></li>
</ol>


<p>``` ruby second_action
middle = 2
[0, 1, 2, 3, 4]</p>

<h1>left side = [0, 1]</h1>

<h1>right side = [2, 3, 4]</h1>

<p>```</p>

<p>Check: is target = middle? No. So onto step 2, compare: target > middle (4 > 2). Use the right side.</p>

<p>``` ruby third_action
middle = 3
[2, 3, 4]</p>

<h1>left side = <a href="http://pointlessprogramming.wordpress.com/2011/02/24/what-in-the-hell-is-big-o/">2</a></h1>

<h1>right side = [3, 4]</h1>

<p>```
target = middle? No
So compare again. target > middle (4 > 3). Use the right side.</p>

<p>``` ruby fourth_action
middle = 4  # note, we always take the higher of two as the middle for an even set.
[3, 4]</p>

<h1>left side = <a href="http://www.daveperrett.com/articles/2010/12/07/comp-sci-101-big-o-notation/">3</a></h1>

<h1>right side = <a href="http://bigocheatsheet.com/">4</a></h1>

<p>```
Target = middle? Yes. We&rsquo;ve found the target and it took 4 tries!</p>

<p>Now let&rsquo;s make sense of this as a logarithmic function: O(log N). We saw above that the calculations work, but why is it log base 2, and why log? If you think of logs as the inverse of exponents, and exponents as repeated multiplication, then logs are repeated division. Where are we dividing in the above procedure? Every step! We&rsquo;re cutting each set in half over and over again until we reach the target, hence repeated division. Why is it log base 2? Log base 2 simply means that we keep dividing by 2, which makes sense because we&rsquo;re cutting the data set in half.</p>

<p>I chose the target number 4 in the binary search method above because it represents the worst case scenario for a set of 10 data. It took 4 tries / actions, and log(10), again with an assumed base 2 since we&rsquo;re in the world of programming, gives us 3.32 which rounds up to 4. Tada!</p>

<p>If you want to see the binary search method or linear methods in action, here&rsquo;s a rather straight-forward <a href="https://www.youtube.com/watch?v=wNVCJj642n4">video</a> demonstrating what I showed above.</p>

<h2>Conclusion and Resources</h2>

<p>I hope that this post helps clarify big O notation for those of you who are brand new to the idea. A few other resources I feel are really well-done: this <a href="http://pointlessprogramming.wordpress.com/2011/02/24/what-in-the-hell-is-big-o/">visual, real-world explanation</a> and this <a href="http://www.daveperrett.com/articles/2010/12/07/comp-sci-101-big-o-notation/">much more technical explanation</a>. I didn&rsquo;t include code in this post because these algorithms are all solved problems already and with some Google sleuthing, you will repos full of them in a multitude of languages. One more resource I like is the <a href="http://bigocheatsheet.com/">big o cheat-sheet</a>.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
</feed>
