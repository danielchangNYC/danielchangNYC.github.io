<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: self-referential | Daniel Chang]]></title>
  <link href="http://danielchangNYC.github.io/blog/categories/self-referential/atom.xml" rel="self"/>
  <link href="http://danielchangNYC.github.io/"/>
  <updated>2014-01-13T00:16:54-05:00</updated>
  <id>http://danielchangNYC.github.io/</id>
  <author>
    <name><![CDATA[Daniel Chang (couchpanda / c0depanda)]]></name>
    <email><![CDATA[daniel.chang85@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self-Referential Associations, AKA Self Joins]]></title>
    <link href="http://danielchangNYC.github.io/blog/2013/11/06/self-referential-associations/"/>
    <updated>2013-11-06T08:00:00-05:00</updated>
    <id>http://danielchangNYC.github.io/blog/2013/11/06/self-referential-associations</id>
    <content type="html"><![CDATA[<p>Week 2 of learning Rails. After 6 weeks at Flatiron, I feel like a beginner again, but not quite like I&rsquo;m stranded on a deserted island &mdash; more like I&rsquo;m Link, and although I wield a wooden sword, new items abound and I&rsquo;m eager to learn how to use them.</p>

<p><img class="<a" src="href="http://www.ohmz.net/wp-content/uploads/2011/08/its-dangerous-to-go-alone-take-this.jpg">http://www.ohmz.net/wp-content/uploads/2011/08/its-dangerous-to-go-alone-take-this.jpg</a>" width="400"></p>

<p>Although the <a href="http://guides.rubyonrails.org/">Rails Guides</a> have been invaluable, trying new constructs myself is how I internalize a concept. This blog post will be about <a href="http://guides.rubyonrails.org/association_basics.html">associations</a>, particularly <a href="http://guides.rubyonrails.org/association_basics.html#self-joins">self joins</a>.</p>

<h2>Mini-Project: Self-Joins</h2>

<p>I created a basic rails app and deployed it on Heroku <a href="https://customer-referrals-testsite.herokuapp.com/">here</a>. Try it out to see how the customer data behaves. Imagine what the schema (or &ldquo;table&rdquo;) might look like and then read on.</p>

<h1>What is a Self Join?</h1>

<p>Below is a self-join. While foreign keys are usually used to link data between two tables, you can use foreign keys to refer to data within the <em>same</em> table to create one that looks something like this:</p>

<p><img class="<a" src="href="http://d2o0t5hpnwv4c1.cloudfront.net/538_sql3/ss_5.png">http://d2o0t5hpnwv4c1.cloudfront.net/538_sql3/ss_5.png</a>" width="600">
<a href="http://net.tutsplus.com/tutorials/databases/sql-for-beginners-part-3-database-relationships/">(source site)</a></p>

<p>I originally tried the following associations below.
<code>ruby customer.rb BROKEN VERSION
class Customer &lt; ActiveRecord::Base
  has_many :referrals, class_name: "Customer", foreign_key: "referring_customer_id", conditions: {:referring_customer_id =&gt; :id}
  belongs_to :referring_customer, class_name: "Customer", foreign_key: "referring_customer_id"
end
</code>
This didn&rsquo;t work. After some serious research, stackoverflow, posting my own <a href="http://stackoverflow.com/questions/19803759/how-do-i-create-a-self-referential-association-self-join-in-a-single-class-usi">stackoverflow question</a> (thanks Peter!!!), trial-and-error, and pry sessions, I refactored my code to:
<code>ruby customer.rb WORKING VERSION
class Customer &lt; ActiveRecord::Base
  has_many :referrals, class_name: "Customer", foreign_key: "referring_customer_id"
  belongs_to :referring_customer, class_name: "Customer"
end
</code>
Let&rsquo;s think about this for a second. Why does this work and what does it do? <code>has_many</code> and <code>belongs_to</code> provide <code>Customer</code>s with a set of methods to access their associated data. The options passed often do not change the database since Rails tries to keep logic defined within the application. Why? I&rsquo;m not exactly sure but I suppose this is partially why Rails easily supports a wide range of databases.</p>

<p>Here&rsquo;s what the arguments do:</p>

<ul>
<li><code>class_name: "Customer"</code> tells Rails to look in the <code>Customer</code> class for the association. What do I mean by association? In <code>has_many :referrals</code>, the <code>:referrals</code> is called the assocation. When would I use this? When I need to override the Rails convention for identifying the class in which to find the association.</li>
<li><code>foreign_key: "referring_customer_id"</code> tells Rails where to find the foreign key. When would I use this? When I need to override the Rails convention for identifying the class in which to find the association. Why didn&rsquo;t I use it for <code>belongs_to</code>? It is implicitly defined with that method.</li>
<li><code>conditions: "referring_customer_id = id"</code> actually fires a <code>WHERE</code> SQL statement with the given value. I originally used this thinking it would match referring customers by their id. It turned out to be an extra constraint though &mdash; <code>AND (referring_customer_id = id)</code> &mdash; which filtered for any customer who referred <em>him/herself</em>.</li>
</ul>


<h1>When else can I use self-joins?</h1>

<p>Generally you can use self-joins anytime you need to create a hierarchy-like, &ldquo;nested&rdquo; structure.
<img class="right <a" src="href="http://d2o0t5hpnwv4c1.cloudfront.net/538_sql3/graph_5.png">http://d2o0t5hpnwv4c1.cloudfront.net/538_sql3/graph_5.png</a>" width="400"></p>

<p>Some other applications could be:</p>

<ul>
<li>Creating parent and child directories for Folder objects.</li>
<li>Creating managers and subordinates for Employee objects.</li>
<li>Creating callers and receivers for PhoneTreeMember objects.</li>
<li>Anything else with a parent-child data relationship.</li>
</ul>


<h1>The Master Sword!</h1>

<p>Just when you thought THAT was exciting, there are also plenty of <em>GEMS</em> that allow you to create these nested structures! Two from the Ruby Toolbox are <a href="https://www.ruby-toolbox.com/projects/awesome_nested_set">Awesome Nested Set</a> and <a href="https://www.ruby-toolbox.com/projects/ancestry">Ancestry</a>.</p>

<p><img class="<a" src="href="https://lh3.ggpht.com/-XQj1y02FMH4/TcnEMrdHk_I/AAAAAAAAAZE/7ssw-Kwlv7s/s1600/Link_taking_Master_Sword.jpg">https://lh3.ggpht.com/-XQj1y02FMH4/TcnEMrdHk_I/AAAAAAAAAZE/7ssw-Kwlv7s/s1600/Link_taking_Master_Sword.jpg</a>" width="400"></p>
]]></content>
  </entry>
  
</feed>
