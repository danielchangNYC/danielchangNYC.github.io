<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | couchpanda @ Flatiron School]]></title>
  <link href="http://danielchangNYC.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://danielchangNYC.github.io/"/>
  <updated>2014-01-06T17:53:09-05:00</updated>
  <id>http://danielchangNYC.github.io/</id>
  <author>
    <name><![CDATA[Daniel Chang (couchpanda / c0depanda)]]></name>
    <email><![CDATA[daniel.chang85@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Big O Notation]]></title>
    <link href="http://danielchangNYC.github.io/blog/2014/01/05/big-o/"/>
    <updated>2014-01-05T23:30:00-05:00</updated>
    <id>http://danielchangNYC.github.io/blog/2014/01/05/big-o</id>
    <content type="html"><![CDATA[<h1>A high-level, simplified explanation of Big O Notation</h1>

<p>Big O notation might look something like this: O(log N)</p>

<p>N = number of input data
O( ) = function notation for Big O (just tells you we&rsquo;re using Big O notation)
log N = the function that describes the efficiency of the procedure or algorithm as N grows bigger and bigger</p>

<p>Programmers use Big O Notation as a way to express how efficient an algorithm or procedure is at performing its designated task (e.g. sorting, searching). The function tells us the maximum number of &ldquo;actions&rdquo; it will take for the algorithm to achieve its goal, given N data.</p>

<h2>Example 1: O(N)</h2>

<p>O(N) is the linear case. Given 10 data, the worst-case scenario is that it will take 10 &ldquo;actions&rdquo; to search for a target, or sort the data, or whatever the goal of the algorithm is. Given 100 data, it will take 100 actions. Given 2000 data, it will take 2000 actions. Given N data, it will take N actions.</p>

<p>A real life example would be if you were looking for a book on your friend&rsquo;s bookshelf.</p>

<p><img class="<a" src="href="http://2.bp.blogspot.com/_5PudbMqUjng/TR5Cu-fq4ZI/AAAAAAAAACk/t_oojdxP-c8/s400/harrypotter.jpg">http://2.bp.blogspot.com/_5PudbMqUjng/TR5Cu-fq4ZI/AAAAAAAAACk/t_oojdxP-c8/s400/harrypotter.jpg</a>" width="400"></p>

<p>Lets say you want your program to find any given book. You could tell the program to start checking books one by one from the left. If you wanted Harry Potter 3, it would only take 3 actions (or tries) because it&rsquo;s the third book in. However, Big O tells us the worst-case scenario. What book would cause the algorithm to take the most possible actions? Harry Potter 7 &mdash; it&rsquo;s the last book so the algorithm would have to run all 7 times. Given 7 books, it took the algorithm 7 actions / tries to find the book <em>in the worst case scenario</em>.</p>

<p>What if we ran this algorithm on 10 books? The worst case would take all 10 tries. How about 1,000,000 books? It would take 1 million tries.</p>

<p>So, TL;DR &mdash; O(N) tells us that given N data, it will take an algorithm N actions / tries to accomplish a task.</p>

<h2>Example 2: O(1)</h2>

<p>What does O(1) tell us? The function inside is simply &ldquo;1&rdquo;. This means that no matter what number N is, it will always accomplish the task in 1 try. It represents the most efficient algorithm possible.</p>

<p>Does this exist? Sure it does! But it might not give you exactly what you&rsquo;re looking for. Here&rsquo;s an algorithm that can be described with O(1).</p>

<p><code>ruby
def efficient_but_useless
  return true
end
</code></p>

<p>TL;DR algorithms with O(1) always finish in 1 try.</p>

<h2>Example 3: O(N<sup>2</sup>) or any higher exponent</h2>

<p>Is this an efficient algorithm? In other words, if I input a large amount of data for N, what does that tell me about the algorithm? If I input N=1, then no matter what, it will take 1 try. But if I put in N=10, then it will take 10<sup>2</sup> = 100 actions / tries to complete the algorithm (worst case scenario). Imagine if the exponent were higher, or if N were higher. Then the algorithm would be super inefficient!</p>

<p>What kinds of algorithms would have O(N<sup>2</sup>)? Simply put, algorithms with nested loops usually exhibit this behavior. If you have to run a procedure on each item, and each item has to check itself against every other item in some way, then worst case is that you run the procedure N<sup>2</sup> times. In other words, it takes N<sup>2</sup> actions.</p>

<h2>Example 4: O(log N)</h2>

<p>This time the function is logarithmic.</p>

<p><img class="<a" src="href="http://image.tutorvista.com/content/feed/tvcs/img64.gif">http://image.tutorvista.com/content/feed/tvcs/img64.gif</a>"></p>

<p>Imagine that the x-axis represents N, how much input data you have, and the y-axis tells us how many actions or tries it takes the algorithm to finish (worst case scenario, as usual). As N grows larger, the number of tries grows, but slowly.</p>

<p>Let&rsquo;s try calculating a few examples. Keep in mind that when programmers write log N, it refers to <a href="https://stackoverflow.com/questions/1569702/is-big-ologn-log-base-e">log base 2</a>. Also, since the number of actions has to be a whole number, if you get a decimal, the rule of thumb is to round up. So given 10 data, it will take log(10) = 3.32 which rounds up to 4 actions, max. This isn&rsquo;t that much more efficient than O(N), but what if N=1,000,000? It would take your algorithm log(1000000) = 19.93 which rounds up to 20 tries, max. For 1000000 data, that&rsquo;s pretty efficient!</p>

<h2>Conclusion and Resources</h2>

<p>I hope that this post helps clarify big O notation for those of you who are brand new to the idea. A few other resources I feel are really well-done: this <a href="http://pointlessprogramming.wordpress.com/2011/02/24/what-in-the-hell-is-big-o/">visual, real-world explanation</a> and this <a href="http://www.daveperrett.com/articles/2010/12/07/comp-sci-101-big-o-notation/">much more technical explanation</a>. I didn&rsquo;t include code in this post because these algorithms are all solved problems already and with some Google sleuthing, you will repos full of them in a multitude of languages. One more resource I like is the <a href="http://bigocheatsheet.com/">big o cheat-sheet</a>.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 'Exceptional' Knowledge]]></title>
    <link href="http://danielchangNYC.github.io/blog/2013/10/23/throw-raise/"/>
    <updated>2013-10-23T08:00:00-04:00</updated>
    <id>http://danielchangNYC.github.io/blog/2013/10/23/throw-raise</id>
    <content type="html"><![CDATA[<h2>Foreward</h2>

<p>Most of us have encountered the methods <code>raise</code>, <code>rescue</code>, <code>catch</code>, <code>throw</code>, and <code>break</code> in Ruby. We can generally understand what&rsquo;s going on when we read code that uses it, but what exactly is the difference between them all? Here&rsquo;s a quick guide plus some fun and useful facts.</p>

<h1>If you remember just one thing&hellip;</h1>

<ul>
<li><code>raise</code> and <code>rescue</code> are used for handling errors <em>only</em></li>
<li><code>throw</code> and <code>catch</code> are used in order to terminate execution early when no other work is needed. <a href="http://rubylearning.com/blog/2011/07/12/throw-catch-raise-rescue-im-so-confused/">source</a></li>
</ul>


<h1>Raise and Rescue</h1>

<p><code>raise</code> and <code>rescue</code> are used exclusively for handling errors. By default, raising an error will exit the program.
``` ruby exception.rb
def test_rescue
  puts &ldquo;This is before raise&rdquo;
  raise &ldquo;Raised an error&rdquo;
  puts &ldquo;This is after raise. It won&rsquo;t ever run.&rdquo;
end
test_rescue</p>

<h1>=> This is before raise</h1>

<h1>=> test.rb:3:in `test_rescue': Raised an error (RuntimeError)</h1>

<p>  from test.rb:9:in <code>&lt;main&gt;'
```
This happens unless there is a</code>rescue` statement which will run in case of an exception.</p>

<p>``` ruby exception.rb
def test_rescue
  puts &ldquo;This is before raise&rdquo;
  raise &ldquo;Raised an error&rdquo;
  puts &ldquo;This is after raise. It won&rsquo;t ever run.&rdquo;
  rescue
  puts &ldquo;I&rsquo;m rescued!&rdquo;
end
test_rescue</p>

<h1>=> This is before raise</h1>

<h1>=> I&rsquo;m rescued!</h1>

<p><code>
The above Ruby code can be rewritten like so:
</code> ruby exception.rb
def test_rescue
  puts &ldquo;This is before raise&rdquo;
  raise &ldquo;Raised an error&rdquo;
  puts &ldquo;This is after raise. It won&rsquo;t ever run.&rdquo;
  rescue Exception => e
  puts e
end
test_rescue</p>

<h1>=> This is before raise</h1>

<h1>=> Raised an error</h1>

<p>```
Ruby has many different types of exceptions (see <a href="http://ruby-doc.org/core-2.0.0/Exception.html">documentation</a>).
Raise takes up to three parameters:
 * the exception type
 * an error message
 * an array of callback information.</p>

<p>All three are optional and Ruby knows that if you only pass in a string that it&rsquo;s the message. Usually you don&rsquo;t set the last parameter since <code>Kernel#caller</code> automatically creates that array.</p>

<p>Here are a couple of valid <code>raise</code> statements.
<code>ruby Message parameter given
raise "This is an error"
</code>
<code>ruby Error and Message parameters
raise StandardError "Most error subclasses extend StandardError"
</code></p>

<h3>Exceptional Ruby</h3>

<p>Exception is the root of Ruby&rsquo;s exception hierarchy. It&rsquo;s the class from which all Exceptions descend. It is king. This has a very interesting consequence.</p>

<p><code>rescue Exception</code> rescues from EVERYTHING, including syntax errors, load errors, and any of the following listed below.</p>

<ul>
<li><p>Rescuing <code>Interrupt</code> prevents you from being able to CTRL+C out of the program.</p></li>
<li><p>Rescuing <code>SignalException</code> prevents the program from responding correctly to signals. It will be unkillable, except with kill -9. <a href="http://stackoverflow.com/questions/10048173/why-is-it-bad-style-to-rescue-exception-e-in-ruby">source</a></p></li>
</ul>


<p>``` ruby
loop do
  begin</p>

<pre><code>eval dinosaurs ru1ez the pl@netz!!! ROArR{bark}[:ARF].ENV
</code></pre>

<p>  rescue Exception</p>

<pre><code>puts "What meteor?"
</code></pre>

<p>  end
end
```</p>

<h1>Break, Catch, and Throw</h1>

<p><code>break</code>, <code>catch</code> and <code>throw</code> are used in order to terminate execution early when no other work is needed. <code>break</code> leaves the <em>current</em> loop while the <code>catch</code> and <code>throw</code> combination can be used to break out of <em>any number</em> of loops at one time.</p>

<p>``` ruby break example
array = [&ldquo;brainfuck&rdquo;, &ldquo;ruby&rdquo; &ldquo;befunge&rdquo;, &ldquo;python&rdquo;, &ldquo;perl&rdquo;]
array.each do |language|
  puts &ldquo;My favorite computer langauge is #{language}&rdquo;
  break
end</p>

<h1>=> &ldquo;My favorite computer langauge is brainfuck&rdquo;</h1>

<p><code>
</code> ruby hypothetical throw and catch example</p>

<h1>=> recipe_hash = {&hellip;}</h1>

<p>def show_recipe_for(recipe_name)
  recipe = catch(:recipe) {</p>

<pre><code>recipe_hash.each do |meal_type, dish_hash|
  dish_hash.each do |dish, dish_recipe|
    if recipe_name == dish_recipe
      throw :recipe, dish_recipe
    end
  end
end
</code></pre>

<p>  }
end
<code>``
Notice that the two loops are enclosed in the</code>catch<code>block. This means that once the</code>throw<code>statement is executed, it will store the value of its second argument into</code>:recipe` and send it back to the catch statement. By doing so, it exits all the loops after finding the first recipe match. From there, the method finishes executing as normal.</p>

<p>Because my example is a bit contrived, I will post a real-life example from another <a href="http://rubylearning.com/blog/2011/07/12/throw-catch-raise-rescue-im-so-confused/">blog</a> by rubyist Avdi Grimm.</p>

<p>``` ruby google search scraping example
def show_rank_for(target, query)
  rank = catch(:rank) {</p>

<pre><code>each_google_result_page(query, 6) do |page, page_index|
  each_google_result(page) do |result, result_index|
    if result.text.include?(target)
      throw :rank, (page_index * 10) + result_index
    end
  end
end
"&lt;not found&gt;"
</code></pre>

<p>  }
  puts &ldquo;#{target} is ranked #{rank} for search &lsquo;#{query}&rsquo;&rdquo;
end
<code>``
Since loading pages over and over again can be an expensive process, the coder above uses a</code>throw<code>-</code>catch` to exit the loop when the first matching result is found.</p>

<h2>Throw, Catch and Sinatra</h2>

<p>An even more mind-blowing example from the <a href="http://rubylearning.com/blog/2011/07/12/throw-catch-raise-rescue-im-so-confused/">same blog post</a> reveals that Sinatra has a built-in catch for the <code>#last-modified</code> method. You might use this method to check a user&rsquo;s <em>cache</em> for what version of a certain page the user has on his/her machine. Why would you do this? Simple! In order to cut out any expensive and unnecessary processing. If the page in the cache is old, then you&rsquo;d update the page. Otherwise, just load from cache.</p>

<p>For your convenience, here&rsquo;s the simplified code Grimm posted to demonstrate.</p>

<p>``` ruby
def last_modified(time)
  response[&lsquo;Last-Modified&rsquo;] = time
  if request.env[&lsquo;HTTP_IF_MODIFIED_SINCE&rsquo;] > time</p>

<pre><code>throw :halt, response
</code></pre>

<p>  end
end
<code>
When Ruby encounters the `throw`, it zips back up the call stack looking for a matching symbol, `:halt`. Where's the `catch` block though? It's clearly not in the same method as the `throw`. This means that it must be further up the stack. In other words, `#last_modified` was called within a `catch` block.
</code> ruby
catch (:halt) do
  # code
  last_modified(time) # => the throw in this method sends :halt up to the encapsulating catch
  # code
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord]]></title>
    <link href="http://danielchangNYC.github.io/blog/2013/10/08/rails-presentation-post/"/>
    <updated>2013-10-08T07:00:00-04:00</updated>
    <id>http://danielchangNYC.github.io/blog/2013/10/08/rails-presentation-post</id>
    <content type="html"><![CDATA[<p>I took a bit of a dive today and looked a Ruby on Rails <a href="http://www.slideshare.net/aizatto/ruby-on-rails-48391">presentation</a>. Here&rsquo;s what I gleaned from looking through all the slides.</p>

<ul>
<li><p>Rails is a web application framework that allows your Ruby to interact with the web seamlessly. By &ldquo;interact with the web&rdquo;, I assume the presentation means &ldquo;interact with databases.&rdquo;</p></li>
<li><p>Rails implements a principle called &ldquo;MVC&rdquo; &mdash; Model View Controller. Rails seems to handle each task separately. I&rsquo;m going to focus on the Model, which uses ActiveRecord.</p></li>
<li><p>ActiveRecord is a Module that Rails uses to model and interact with databases. It makes database queries both simple and intuitive.</p></li>
</ul>


<p>Here are some concrete query comparisons between using SQLite3 versus Rails' ActiveRecord.</p>

<p>Assume we have a table called &ldquo;dogs,&rdquo; each with a name, age, weight, and type. Each attribute would be a column, and each row would represent a different dog.</p>

<p><code>sql Table using SQLite3
CREATE TABLE dogs (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT;
  age INTEGER;
  weight INTEGER;
  type TEXT
);
</code>
We can also imagine this as a class of Dog objects in Ruby. Here&rsquo;s how one might create the barebones structure in Ruby.
<code>ruby Dogs as objects of class Dog in Ruby
class Dog
  attr_accessor :id, :name, :age, :weight, :type
end
</code>
<code>ruby Table initialized using Rails' ActiveRecord
class Dog &lt; ActiveRecord::Base
end
</code></p>

<p>See how simple that was? Now we can make queries on the table.</p>

<p><code>sql SQLite3 query for first dog in table
SELECT * FROM dogs WHERE id=1;
</code>
<code>ruby Rails query for first dog in table
Dog.find(1)
</code></p>

<p>That&rsquo;s just the beginning! Check this out.</p>

<p><code>sql SQLite3 query appending conditions
SELECT * FROM dogs WHERE age=8 AND type="corgi";
</code>
<code>ruby Rails query appending same conditions
Dog.find_by_age_and_type 25, "corgi"
</code></p>

<p>It seems like ActiveRecord must use certain keywords like &lsquo;by&rsquo; and &lsquo;and&rsquo; in order to dynamically use the attribute names that the user inputs.</p>

<p>What is really beautiful though is the idea of &ldquo;configuration of convention&rdquo; that Rails implements in order to shorten the amount of code you need to write. Slides 42-44 of the <a href="http://www.slideshare.net/aizatto/ruby-on-rails-48391">presentation</a>  gave a particularly good example of the idea. No wonder people love Rails!</p>

<p>The slides continue talking about the MVC</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursive Arrays]]></title>
    <link href="http://danielchangNYC.github.io/blog/2013/10/07/flatten-arrays/"/>
    <updated>2013-10-07T13:00:00-04:00</updated>
    <id>http://danielchangNYC.github.io/blog/2013/10/07/flatten-arrays</id>
    <content type="html"><![CDATA[<h2>Foreword</h2>

<p>I feel a certain level of confidence declaring that every programmer has been in the situation where he/she has 10+ tabs open trying troubleshooting a problem and finally concludes, &ldquo;There must be an easier way.&rdquo; Or, if you&rsquo;ve been &lsquo;in the zone&rsquo; for long enough, you might start wondering what exactly got you in this troubleshooting hell to begin with.</p>

<p>In this post, I will share what I learned from one such experience.</p>

<h3>Context and Problem</h3>

<p>I was writing an automatic schedule-maker in Ruby. create_groups is a method that, takes an array of student names and returns an array of the students in a specified group sizes. The create_groups method also takes a parameter that allows you to specify a number of groups. The student groups should be randomized.</p>

<p>First, I defined the method create_groups, set up an array of grouped students that I can push groups into, and returned the value.</p>

<p><code>ruby
def create_groups(students, group_size, number_of_groups)
  groups = []  #=&gt; store the groups of students in this array
  # Implement magic.
  groups  #=&gt; Return groups
end
create_groups(students, 4, 20)
students = [.......] #=&gt; This array contains 41 student names. Check my Github Gist linked below for the array I used in the completed program.
</code></p>

<p>After considering several strategies, I decided that it would make the most sense sort the 40 students using what I dubbed the &ldquo;card dealing method&rdquo; &mdash; The first student goes to group 1, the second to group 2, the third to group 3, and so forth.</p>

<p>``` ruby
def create_groups(students, group_size, number_of_groups)
  groups = []
  normalized_list = normalize(students, group_size, number_of_groups)
  normalized_list.each_with_index do |name, i|</p>

<pre><code># This part will sort students using the "card-dealing method"
</code></pre>

<p>  end
  groups
end
```</p>

<p>Since there are 20 groups of 4, I needed 80 students. On an abstract level, the number of students I need in order to sort (the &ldquo;desired length&rdquo;) is &ldquo;# of groups&rdquo; x &ldquo;# of students per group&rdquo;.</p>

<p>I decided to create another method which would normalize my list to this set amount.</p>

<p>The #normalize method will return an array of desired length by <em>replicating the students a number of times, and then slicing out the desired number of students from the replicated array.</em></p>

<p>Here&rsquo;s what I came up with at first:
``` ruby
def create_groups(students, group_size, number_of_groups)
  #&hellip;folded this code for now&hellip;
end</p>

<p>def normalize(list_to_norm, group_size, number_of_groups)
  desired_length = group_size*number_of_groups
  new_list = list_to_norm
  while new_list.length &lt; desired_length</p>

<pre><code>new_list &lt;&lt; list_to_norm
new_list = new_list.flatten
</code></pre>

<p>  end
end
```</p>

<p>When I ran this given a student array though, I received the following error:
<code>sh
rb24:`flatten': tried to flatten recursive array (ArgumentError)
</code></p>

<p>WAT? After many attempts at troubleshooting and searching the web for an answer, I decided to inspect what exactly I was trying to flatten.</p>

<p><code>ruby
def normalize(list_to_norm, group_size, number_of_groups)
  desired_length = group_size*number_of_groups
  new_list = list_to_norm
  new_list &lt;&lt; list_to_norm
  puts new_list
end
</code></p>

<p>The output was VERY telling. The <code>...</code> line below is just a placeholder for names 4 through 40.</p>

<p><code>sh
Name1
Name2
Name3
...
Name41
[...]
</code></p>

<p>The clue was in the <code>[...]</code>.</p>

<p>I then tried running <code>new_list.object_id</code> and <code>list_to_norm.object_id</code> and they turned out to be the same.</p>

<h3>A-ha!</h3>

<p>The <code>[...]</code> indicated that new_list is now a <em>recursive array</em>. More on recurive arrays <a href="http://stackoverflow.com/questions/10606734/what-are-recursive-arrays-good-for">here</a>.</p>

<p>As it turns out, my problem was in the 2nd line of my normalize method.</p>

<p><code>ruby
new_list = list_to_norm
</code>
This line of code sets the <code>new_list</code> variable to point at the exact same object as the <code>list_to_norm</code> method. So later, when I called <code>new_list &lt;&lt; list_to_norm</code>, I ended up pushing an Array object into itself. The image below</p>

<p>However, Ruby clearly didn&rsquo;t like this, and I suspect that it has to do with the way <code>Array.flatten</code> works. At the very least, we can conclude that <code>.flatten</code> can only flatten two different Array objects.</p>

<p>So that&rsquo;s what I learned in 40 minutes of head-banging against a figurative brick wall. I hope you learned something as well from this post!</p>

<p>Also, as promised, here is a link to <a href="https://gist.github.com/danielchangNYC/6787872">my full gist</a>.</p>
]]></content>
  </entry>
  
</feed>
