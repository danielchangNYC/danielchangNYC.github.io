<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Daniel Chang]]></title>
  <link href="http://danielchangNYC.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://danielchangNYC.github.io/"/>
  <updated>2014-04-09T11:16:39-04:00</updated>
  <id>http://danielchangNYC.github.io/</id>
  <author>
    <name><![CDATA[Daniel Chang (couchpanda / c0depanda)]]></name>
    <email><![CDATA[daniel.chang85@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Rails Callbacks: A Step in the Right Direction]]></title>
    <link href="http://danielchangNYC.github.io/blog/2014/04/08/tdd3-TestingHooks/"/>
    <updated>2014-04-08T09:00:00-04:00</updated>
    <id>http://danielchangNYC.github.io/blog/2014/04/08/tdd3-TestingHooks</id>
    <content type="html"><![CDATA[<p>Anyone who&rsquo;s worked with tightly-coupled models in rails will likely know the pain of tracing the stack for an error triggered from a callback method. Such painful experiences have led developers to come to a consensus on general rules like <a href="http://blog.bignerdranch.com/1658-the-only-acceptable-use-for-callbacks-in-rails-ever/">&ldquo;Use a callback only when the logic refers to state internal to the object&rdquo;</a>, according to Jonathan Wallace. More on this topic by Samuel Mullen in a great blogpost, <a href="http://www.samuelmullen.com/2013/05/the-problem-with-rails-callbacks/">The Problem with Rails Callbacks</a>.</p>

<p>The following post revolves around an <code>Invitation</code> model I wrote with my team mates and then later debated the callback to use.</p>

<p>The <code>Invitation</code> model generates a unique token which it uses to identify users who have clicked on a registration link.</p>

<p>The callback I chose to use first was <code>after_initialize</code> because an <code>invite</code> object must always have a <code>token</code>.</p>

<p>``` ruby user.rb
class User &lt; ActiveRecord::Base
  after initialize :add_token #NOTE my syntax highlighter dislikes the underscore. see below.</p>

<p>  def add_unique_token</p>

<pre><code>self.token = Tokenizer.Generate
</code></pre>

<p>  end
end
```</p>

<p><strong>NOTE</strong> <code>after initialize</code> above should be <code>after_initialize</code>. For some reason my syntax highlighting plugin doesn&rsquo;t like the underscore in the correct version.</p>

<p>The associated test:</p>

<p>``` ruby invitation_spec.rb
describe Invitation do
  it &ldquo;generates a random token on initialize&rdquo; do</p>

<pre><code>invite = Invitation.new
expect(invite.token).not_to be_nil
</code></pre>

<p>  end
end
```</p>

<p>However, another team mate suggested using <code>before_create</code> instead.</p>

<p>His model and test:</p>

<p>``` ruby invitation.rb
class User &lt; ActiveRecord::Base
  before_create :add_token</p>

<p>  def add_unique_token</p>

<pre><code>self.token = Tokenizer.generate
</code></pre>

<p>  end
end
```</p>

<p>``` ruby invitation_spec.rb
describe Invitation do
  it &ldquo;generates a random token before create&rdquo; do</p>

<pre><code>invite = Invitation.new
expect(invite.token).to be_nil
invite.save
expect(invite.token).not_to be_nil
</code></pre>

<p>  end
end
```</p>

<h3>Why does this subtle change matter?</h3>

<p>First, <strong>using <code>after_initialize</code> could produce a false positive.</strong> While the <code>after_initialize</code> test does exactly what the <code>it</code> statement says, there&rsquo;s a chance that we may miss, say, a validation error that happens before <code>save</code>. This test would pass, and so would the validations, but for some reason you might find that your invitations aren&rsquo;t working properly. <code>after_initialize</code> allows us to omit saving from the test, which one could generally assume is always desired given that callbacks should only &ldquo;refer to state internal to an object&rdquo;.</p>

<p>Additionally, <strong>if you&rsquo;re testing a callback that affects the internal state of an object, we must test for a state-change.</strong> Using <code>after_initialize</code>, we can tell that a new invite has a token. However, we cannot say that we&rsquo;ve tested the non-presence and the presence of the token. The pivotal point again is around <code>#save</code>. <code>#save</code> triggers the change and we can say with certainty that we&rsquo;ve not only seen a &ldquo;zero to one&rdquo; change happen, but that the change has persisted in our database.</p>

<p>Finally, if you use <code>after_initialize</code> with the underscore in a block of code in <code>Octopress</code>, your blog will refuse to generate. Coincidence? I think not.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec Custom Matchers: A Deep Dive]]></title>
    <link href="http://danielchangNYC.github.io/blog/2014/01/15/tdd2-RSpecMatchers/"/>
    <updated>2014-01-15T06:40:00-05:00</updated>
    <id>http://danielchangNYC.github.io/blog/2014/01/15/tdd2-RSpecMatchers</id>
    <content type="html"><![CDATA[<h1>What&rsquo;s a Matcher?</h1>

<p><code>expect(dan.current_zipcode).to eq(10002)</code></p>

<p>In the line above, the <code>matcher</code> is the method <code>eq</code> because RSpec will check to see if the value of <code>dan.current_zipcode</code> matches <code>10002</code>.</p>

<p>Let&rsquo;s say that this was a line you wrote for as part of a test for a location tracking app. You want your code to be as clear as possible for collaborators or even for your future self.</p>

<p>Wouldn&rsquo;t it sound even better if you could write this?</p>

<p><code>expect(dan).to be_in_zipcode(10002)</code></p>

<p>This requires <code>be_in_zipcode</code> to be a method in <code>RSpec</code>&rsquo;s matcher library. I&rsquo;m going to briefly explain how to create this new matcher, but for alternate explanations, check out the <a href="https://github.com/dchelimsky/rspec/wiki/Custom-Matchers">Rspec Github Wiki</a> and Chapter 7 of Aaron Sumner&rsquo;s <a href="https://leanpub.com/everydayrailsrspec">Everyday Rails Testing with RSpec</a>.</p>

<p>My intention is not to write another Matcher tutorial (though this might inevitably happen). After reading Sumner&rsquo;s chapter, I could imagine how matchers were created but ultimately, I felt a bit uncertain. With a little bit of <code>Pry</code> magic and doc-digging, I think I&rsquo;ve finally put most of the puzzle together which I&rsquo;m looking forward to sharing below! Constructive feedback and deeper insights are always welcome. :)</p>

<h1>Match-Maker, Match-Maker, Make Me a Match!</h1>

<p>Let&rsquo;s write some code so that we can use the method <code>be_in_zipcode(10002)</code> from above.</p>

<p>General syntax at bare minimum first:
``` ruby syntax.rb
RSpec::Matchers.define :new_matcher_name do |expected|
  match do |actual|</p>

<pre><code># Lines of code you want this matcher to run
</code></pre>

<p>  end</p>

<p>  #optional description and failure message definition blocks
end</p>

<h1>From the describe block:</h1>

<h1>expect(actual).to matcher_method(expected)</h1>

<p>```</p>

<p>NOTE: Store your matcher files in <code>spec/support/matchers/</code> and require them in <code>spec/spec_helper.rb</code> with the following line:</p>

<p><code>Dir[File.dirname(__FILE__) + "/support/**/*.rb"].each {|f| require f}</code></p>

<p>Now onto our example:
``` ruby be_in_zipcode.rb
RSpec::Matchers.define :be_in_zipcode do |zipcode|
  match do |friend|</p>

<pre><code>friend.in_zipcode?(zipcode)
</code></pre>

<p>  end</p>

<p>  # Optional failure messages
  failure_message_for_should do |actual|</p>

<pre><code>"expected friend to be in zipcode"
</code></pre>

<p>  end</p>

<p>  failure_message_for_should_not do |actual|</p>

<pre><code>"expected friend not to be in zipcode"
</code></pre>

<p>  end</p>

<p>  # Optional method description
  description do</p>

<pre><code>"checks user's current zipcode"
</code></pre>

<p>  end
end
```</p>

<p>Again, the failure messages and description are optional blocks. The match block is obviously mandatory. So now that we have our new matcher, let&rsquo;s check out what&rsquo;s going on behind the scenes.</p>

<h1>Under the hood</h1>

<p><code>RSpec::Matchers.define :be_in_zipcode do |zipcode|</code></p>

<p>The <code>define</code> method, extended from the DSL module, does the following:</p>

<p>``` ruby define.rb RSpec::Matchers::DSL#define
def define(name, &amp;declarations)
  matcher_template = RSpec::Matchers::DSL::Matcher.new(name, &amp;declarations)
  define_method name do |*expected|    # => expected for us is the var zipcode</p>

<pre><code>matcher = matcher_template.for_expected(*expected)
matcher.matcher_execution_context = @matcher_execution_context ||= self
matcher
</code></pre>

<p>  end
end</p>

<h1>name = be_in_zipcode</h1>

<p>```</p>

<p>The second line setting <code>matcher_template</code> initializes an <code>RSpec::Matchers::DSL::Matcher</code> object which stores the method name and the declarations block.</p>

<p><code>define_method</code> then creates the <code>be_in_zipcode</code> method. The next line&rsquo;s <code>for_expected(*expected)</code> method sets the zipcode as the expected value and your failure messages/description from the matcher template in the second line. The messages and description are stored in the @messages attribute hash.</p>

<p>The next line I&rsquo;m not sure about since <code>matcher_execution_context</code> refers to an attribute accessor. I don&rsquo;t see it in the Matcher module either. Any insight here would be great!</p>

<p>Moving onto the last piece: the match block.</p>

<p>``` ruby
  match do |friend|</p>

<pre><code>friend.in_zipcode?(zipcode)
</code></pre>

<p>  end
```</p>

<p><code>RSpec::Match#match</code> stores the given block in <code>@match_block</code>, so essentially, <code>@match_block = friend.in_zipcode?(zipcode)</code>.</p>

<p>Later, when you run your specs with the new matcher, the <code>match_block</code> will get called from the method <code>RSpec::Match#matches?</code>.</p>

<p>``` ruby matches?
def matches?(actual)
  @actual = actual
  if @expected_exception</p>

<pre><code>begin
  instance_exec(actual, &amp;@match_block)
  true
rescue @expected_exception
  false
end
</code></pre>

<p>  else</p>

<pre><code>begin
  instance_exec(actual, &amp;@match_block)
rescue Spec::Expectations::ExpectationNotMetError
  false
end
</code></pre>

<p>  end
end
```</p>

<p>And that&rsquo;s it!</p>

<p>So if I were to run the original line, <code>expect(dan).to be_in_zipcode(10002)</code>, the following would happen:</p>

<ol>
<li><code>expect(dan)</code> returns an <code>RSpec::Expectations::ExpectationTarget</code> object storing the object <code>dan</code>. Specifically: <code>=&gt; #&lt;RSpec::Expectations::ExpectationTarget:0x007fbf511e4c78 @target=#&lt;User id: 1, name: dan&gt;&gt;</code></li>
<li>the <code>to</code> method passes in <code>be_in_zipcode(10002)</code> and calls a method called <code>handle_matcher</code>&hellip;</li>
<li>&hellip; which checks if <code>be_in_zipcode</code> has been defined as a matcher.</li>
<li>Since we&rsquo;ve defined <code>be_in_zipcode</code>, <code>matches?</code> gets called our block, which we saw above.</li>
<li><code>handle_matcher</code> then figures out how to respond, given the messages you passed in when you defined the new matcher.</li>
</ol>


<p>That&rsquo;s our deep dive into RSpec&rsquo;s Custom Matchers. Again, feedback always welcome. Hope you enjoyed the complexity as much as I did! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecord, Equality, and Rogue]]></title>
    <link href="http://danielchangNYC.github.io/blog/2014/01/13/tdd1-ActiveRecordEqualityRogue/"/>
    <updated>2014-01-13T23:00:00-05:00</updated>
    <id>http://danielchangNYC.github.io/blog/2014/01/13/tdd1-ActiveRecordEqualityRogue</id>
    <content type="html"><![CDATA[<p><img class="right <a" src="href="http://static.comicvine.com/uploads/original/8/85629/1887574-rogue1.gif">http://static.comicvine.com/uploads/original/8/85629/1887574-rogue1.gif</a>" title="Rogue" >
Almost done with my model specs! I ran into a couple of interesting problems that I posted on Stack Overflow, one of which I&rsquo;ll cover briefly below. Oh yeah, and Rogue! I&rsquo;ll explain that in the last section of this post.</p>

<h2>The problem I ran into (from my <a href="https://stackoverflow.com/questions/21102549/why-is-the-where-query-in-rails-returning-a-different-object">StackOverflow post</a>)</h2>

<p><em>If you just read the whole post, skip to the last section of this blog post.</em></p>

<p>I&rsquo;m testing chats between users in my app. I&rsquo;m using RSpec and FactoryGirl</p>

<p>The test that&rsquo;s not passing:</p>

<p><code>ruby chat_spec.rb
it "creates a chat if one does not exist" do
  bob = create(:user, username: "bob")
  dan = create(:user, username: "dan")
  new_chat = Chat.create(user_id: dan.id, chatted_user_id: bob.id)
  expect(Chat.where("chatted_user_id = ?", bob.id).first).to equal(new_chat)
end
</code></p>

<p>The failure message says:</p>

<p>``` sh
Failure/Error: expect(Chat.where(&ldquo;chatted_user_id = ?&rdquo;, bob.id).first).to equal(new_chat)</p>

<p>   expected #&lt;Chat:70120833243920> => #<Chat id: 2, user_id: 2, chatted_user_id: 3></p>

<pre><code>    got #&lt;Chat:70120833276240&gt; =&gt; #&lt;Chat id: 2, user_id: 2, chatted_user_id: 3&gt;
</code></pre>

<p>   Compared using equal?, which compares object identity,
   but expected and actual are not the same object. Use
   <code>expect(actual).to eq(expected)</code> if you don&rsquo;t care about
   object identity in this example.
```</p>

<p>Why is my query returning a different object id?</p>

<h3>Answer from Simone Carletti on StackOverflow</h3>

<p>equal checks object identity. The objects you are testing are two objects (instances) referencing the same record, but they are actually different objects from a Ruby virtual machine point of view.</p>

<p>You should use
<code>ruby
expect(Chat.where("chatted_user_id = ?", bob.id).first).to eq(new_chat)
</code>
To better understand the problem, look at the following example</p>

<p><code>
2.0.0-p353 :001 &gt; "foo".object_id
 =&gt; 70117320944040
2.0.0-p353 :002 &gt; "foo".object_id
 =&gt; 70117320962820
</code>
Here I&rsquo;m creating two identical strings. They are identical, but not equal because they are actually two different objects.</p>

<p><code>
2.0.0-p353 :008 &gt; "foo" == "foo"
 =&gt; true
2.0.0-p353 :009 &gt; "foo".equal? "foo"
 =&gt; false
</code></p>

<p>That&rsquo;s the same issue affecting your test. equal checks if two objects are actually the same at the object_id level. But what you really want to know is if they are the same record.</p>

<h2>So what&rsquo;s happening under the hood?</h2>

<p>The &ldquo;where&rdquo; query returns an array of objects matching the query, and those objects must be Active Record objects that just handle the data. If I make another query, Active Record must be creating another set of objects to handle each row of data.</p>

<p>I wanted to confirm this before throwing it out on the web as &ldquo;fact&rdquo;, so here&rsquo;s what an Active Record object is from <a href="http://www.martinfowler.com/eaaCatalog/activeRecord.html">Martin Fowler himself</a>:</p>

<blockquote><p>An object that wraps a row in a database table or view, encapsulates the database access, and adds domain logic on that data.</p></blockquote>

<p>Think of an Active Record object sort of like Rogue (see above). For those of you who don&rsquo;t remember, Rogue absorbs the memories and abilities of any person she touches.</p>

<p><img class="<a" src="href="http://31.media.tumblr.com/25cd14bae1b207202d0ee9b56b475409/tumblr_mzd6fjLYmf1sqhdy2o1_1280.png">http://31.media.tumblr.com/25cd14bae1b207202d0ee9b56b475409/tumblr_mzd6fjLYmf1sqhdy2o1_1280.png</a>" width="480" title="Comic Picture Rogue&rsquo;s Powers" ></p>

<p>Similarly (sorta), an Active Record objects takes the data (memories) of a certain row and then takes on the behavior (abilities) of the object type matching the table name.</p>

<p>Ok, so that was really just an excuse to get Rogue somewhere on my blog. While I&rsquo;m at it, here&rsquo;s one of her destroying Ororo (Storm).</p>

<p><img class="<a" src="href="http://i22.photobucket.com/albums/b310/RogueX18/Rogue%20Absorptions/UncannyX-Men158Storm.jpg">http://i22.photobucket.com/albums/b310/RogueX18/Rogue%20Absorptions/UncannyX-Men158Storm.jpg</a>" title="Rogue and Storm Picture" ></p>

<p>So there you have it! Moral of the story: generally remember to use eq to test equivalence in RSpec with ActiveRecord.</p>

<p>Oh, and here&rsquo;s a <a href="https://www.relishapp.com/rspec/rspec-expectations/v/2-0/docs/matchers/equality-matchers">bonus resource: equal, eql, eq, and ==</a> in RSpec.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How and Why I Began Testing in Ruby on Rails]]></title>
    <link href="http://danielchangNYC.github.io/blog/2014/01/12/tdd0-whyttd/"/>
    <updated>2014-01-12T23:00:00-05:00</updated>
    <id>http://danielchangNYC.github.io/blog/2014/01/12/tdd0-whyttd</id>
    <content type="html"><![CDATA[<p>Testing is one of those things that feels a bit like eating well or going to the gym. Since it&rsquo;s already ten days into the New Year and I have yet to commit to any resolutions, let this be it: no more will I make excuses for skipping testing.</p>

<p>What does this really mean to me though? Am I eating broccoli just because someone told me it&rsquo;s good for me? Here are three reasons that have driven me to make the change.</p>

<h2>TDD Reason 1: Manual Testing Sucks; TDD Saves Time</h2>

<p>My friend told me about the job she left before coming to the Flatiron School and one of her responsibilities looked a bit like this:</p>

<p><img class="<a" src="href="http://blog.polarion.com/wp-content/uploads/2012/12/Screen-Shot-2012-12-06-at-12.07.14-PM.png">http://blog.polarion.com/wp-content/uploads/2012/12/Screen-Shot-2012-12-06-at-12.07.14-PM.png</a>"></p>

<p>What. A. Nightmare. There should be a -phobia for this.</p>

<p>Don&rsquo;t get me wrong &mdash; I&rsquo;m sure this could be pretty efficient if the scope of the UX is very small, or you don&rsquo;t know-how to implement TDD yet. However, how can you be sure your site won&rsquo;t expand, or why not learn how to use a gem like Capybara to save you time in the future? Used in conjuction with Guard, you could really save some serious time while coding!</p>

<h2>TDD Reason 2: Code Confidence</h2>

<p>Now that I&rsquo;ve had a bit more experience writing web apps (still without TDD), I&rsquo;ve had the pleasure of seeing them grow and change throughout development. On the other hand, everytime I implemented a new feature, I had less and less confidence that the rest of my code base would work fine. At some point, the prospect of a new feature started feeling like a laundry list or the guarantee of a new bug. Testing will certainly help me find bugs as I introduce them, and therefore boost my confidence in in my code.</p>

<h2>TDD Reason 3: Thinking Before Doing</h2>

<p>Writing tests before writing production code forces you to clearly iterate what it is you want your application to do before you start coding. Ideally, you want your tests to last as long as possible as well, so it will force you to make important decisions about design as well. The prospect of having well thought-out code with lasting design excites me! I&rsquo;ve had several experiences already of trying to refactor poorly designed code and it&rsquo;s quite painful.</p>

<h2>My Next Steps</h2>

<p>I&rsquo;ve decided to begin my TDD exploration by refactoring my first app, Little Red Wagon (LRW). My current reads are Aaron Sumner&rsquo;s book, <a href="https://leanpub.com/everydayrailsrspec">Everyday Rails Testing with RSpec</a>, and <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">Practical Object-Oriented Design in Ruby</a> by Sandi Metz. I&rsquo;m about 30% through each book right now and have written a few model specs already for LRW. I&rsquo;ve decided not to use Factory Girl since it will slow down testing and Rails' built-in fixtures are satisfactory for what I currently have. In any case, the grand plan is to get some hands-on practice writing tests using the TDD book first and then taking on the much larger challenge of redesigning my code base. Thanks for reading, and more updates to come on TDD!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big O Notation]]></title>
    <link href="http://danielchangNYC.github.io/blog/2014/01/05/big-o/"/>
    <updated>2014-01-05T23:30:00-05:00</updated>
    <id>http://danielchangNYC.github.io/blog/2014/01/05/big-o</id>
    <content type="html"><![CDATA[<p>Big O notation might look something like this: O(log N)</p>

<p><code>
N = number of input data
O( ) = function notation for Big O (just tells you we're using Big O notation)
log N = the function that describes the efficiency of the procedure or algorithm as N grows bigger and bigger
</code></p>

<p>Programmers use Big O Notation as a way to express how efficient an algorithm or procedure is at performing its designated task (e.g. sorting, searching). The function tells us the maximum number of &ldquo;actions&rdquo; it will take for the algorithm to achieve its goal, given N data.</p>

<h2>Example 1: O(N)</h2>

<p>O(N) is the linear case. Given 10 data, the worst-case scenario is that it will take 10 &ldquo;actions&rdquo; to search for a target, or sort the data, or whatever the goal of the algorithm is. Given 100 data, it will take 100 actions. Given 2000 data, it will take 2000 actions. Given N data, it will take N actions.</p>

<p>A real life example would be if you were looking for a book on your friend&rsquo;s bookshelf.</p>

<p><img class="<a" src="href="http://2.bp.blogspot.com/_5PudbMqUjng/TR5Cu-fq4ZI/AAAAAAAAACk/t_oojdxP-c8/s400/harrypotter.jpg">http://2.bp.blogspot.com/_5PudbMqUjng/TR5Cu-fq4ZI/AAAAAAAAACk/t_oojdxP-c8/s400/harrypotter.jpg</a>" width="400"></p>

<p>Lets say you want your program to find any given book. You could tell the program to start checking books one by one from the left. If you wanted Harry Potter 3, it would only take 3 actions (or tries) because it&rsquo;s the third book in. However, Big O tells us the worst-case scenario. What book would cause the algorithm to take the most possible actions? Harry Potter 7 &mdash; it&rsquo;s the last book so the algorithm would have to run all 7 times. Given 7 books, it took the algorithm 7 actions / tries to find the book <em>in the worst case scenario</em>.</p>

<p>What if we ran this algorithm on 10 books? The worst case would take all 10 tries. How about 1,000,000 books? It would take 1 million tries.</p>

<p>So, TL;DR &mdash; O(N) tells us that given N data, it will take an algorithm N actions / tries to accomplish a task.</p>

<h2>Example 2: O(1)</h2>

<p>What does O(1) tell us? The function inside is simply &ldquo;1&rdquo;. This means that no matter what number N is, it will always accomplish the task in 1 try. It represents the most efficient algorithm possible.</p>

<p>Does this exist? Sure it does! But it might not give you exactly what you&rsquo;re looking for. Here&rsquo;s an algorithm that can be described with O(1).</p>

<p><code>ruby
def efficient_but_useless
  return true
end
</code></p>

<p>TL;DR algorithms with O(1) always finish in 1 try.</p>

<h2>Example 3: O(N<sup>2</sup>) or any higher exponent</h2>

<p>Is this an efficient algorithm? In other words, if I input a large amount of data for N, what does that tell me about the algorithm? If I input N=1, then no matter what, it will take 1 try. But if I put in N=10, then it will take 10<sup>2</sup> = 100 actions / tries to complete the algorithm (worst case scenario). Imagine if the exponent were higher, or if N were higher. Then the algorithm would be super inefficient!</p>

<p>What kinds of algorithms would have O(N<sup>2</sup>)? Simply put, algorithms with nested loops usually exhibit this behavior. If you have to run a procedure on each item, and each item has to check itself against every other item in some way, then worst case is that you run the procedure N<sup>2</sup> times. In other words, it takes N<sup>2</sup> actions.</p>

<h2>Example 4: O(log N)</h2>

<p>This time the function is logarithmic.</p>

<p><img class="<a" src="href="http://image.tutorvista.com/content/feed/tvcs/img64.gif">http://image.tutorvista.com/content/feed/tvcs/img64.gif</a>"></p>

<p>Imagine that the x-axis represents N, how much input data you have, and the y-axis tells us how many actions or tries it takes the algorithm to finish (worst case scenario, as usual). As N grows larger, the number of tries grows, but slowly.</p>

<p>Let&rsquo;s try calculating a few examples. Keep in mind that when programmers write log N, it refers to <a href="https://stackoverflow.com/questions/1569702/is-big-ologn-log-base-e">log base 2</a>. Also, since the number of actions has to be a whole number, if you get a decimal, the rule of thumb is to round up. So given 10 data, it will take log(10) = 3.32 which rounds up to 4 actions, max. This isn&rsquo;t that much more efficient than O(N), but what if N=1,000,000? It would take your algorithm log(1000000) = 19.93 which rounds up to 20 tries, max. For 1000000 data, that&rsquo;s pretty efficient!</p>

<p>When would we use a logarithmic function to describe the efficiency of an algorithm? One example is the binary search. The binary search algorithm finds a target value within a set of sorted data by repeating the process below until you&rsquo;re left with one value.</p>

<ol>
<li>Find the middle value. If there is more than one, take the higher value.</li>
<li>Compare the target value with the middle value. If it&rsquo;s equal, then we&rsquo;ve found the target. Otherwise, if the target > middle value, then eliminate all values to the left of the middle (lower than the middle); we know the target is in the half with greater values. If the target is &lt;= middle, eliminate the right.</li>
<li>Repeat steps 1 and 2 on the remaining side. Continue until you are left with one value; this is your target.</li>
</ol>


<p>So let&rsquo;s say this is your data, and you&rsquo;re looking for the value, 4.</p>

<p><code>ruby
data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
target = 4
</code></p>

<ol>
<li>Find the middle value. There are 10 values, thus two middles. Take the higher: 5.</li>
</ol>


<p>``` ruby first_action
middle = 5
[0, 1, 2, 3, 4]; [5, 6, 7, 8, 9]</p>

<h1>left side = [0, 1, 2, 3, 4]</h1>

<h1>right side = [5, 6, 7, 8, 9]</h1>

<p>```</p>

<ol>
<li><p>Compare target with middle. Is it equal to 4? No. Since target &lt;= middle (4 &lt;= 5), eliminate the right side.</p></li>
<li><p>Repeat steps 1 and 2 on the left side. We&rsquo;ll keep doing this until we find the target value, 4.</p></li>
</ol>


<p>``` ruby second_action
middle = 2
[0, 1, 2, 3, 4]</p>

<h1>left side = [0, 1]</h1>

<h1>right side = [2, 3, 4]</h1>

<p>```</p>

<p>Check: is target = middle? No. So onto step 2, compare: target > middle (4 > 2). Use the right side.</p>

<p>``` ruby third_action
middle = 3
[2, 3, 4]</p>

<h1>left side = <a href="http://pointlessprogramming.wordpress.com/2011/02/24/what-in-the-hell-is-big-o/">2</a></h1>

<h1>right side = [3, 4]</h1>

<p>```
target = middle? No
So compare again. target > middle (4 > 3). Use the right side.</p>

<p>``` ruby fourth_action
middle = 4  # note, we always take the higher of two as the middle for an even set.
[3, 4]</p>

<h1>left side = <a href="http://www.daveperrett.com/articles/2010/12/07/comp-sci-101-big-o-notation/">3</a></h1>

<h1>right side = <a href="http://bigocheatsheet.com/">4</a></h1>

<p>```
Target = middle? Yes. We&rsquo;ve found the target and it took 4 tries!</p>

<p>Now let&rsquo;s make sense of this as a logarithmic function: O(log N). We saw above that the calculations work, but why is it log base 2, and why log? If you think of logs as the inverse of exponents, and exponents as repeated multiplication, then logs are repeated division. Where are we dividing in the above procedure? Every step! We&rsquo;re cutting each set in half over and over again until we reach the target, hence repeated division. Why is it log base 2? Log base 2 simply means that we keep dividing by 2, which makes sense because we&rsquo;re cutting the data set in half.</p>

<p>I chose the target number 4 in the binary search method above because it represents the worst case scenario for a set of 10 data. It took 4 tries / actions, and log(10), again with an assumed base 2 since we&rsquo;re in the world of programming, gives us 3.32 which rounds up to 4. Tada!</p>

<p>If you want to see the binary search method or linear methods in action, here&rsquo;s a rather straight-forward <a href="https://www.youtube.com/watch?v=wNVCJj642n4">video</a> demonstrating what I showed above.</p>

<h2>Conclusion and Resources</h2>

<p>I hope that this post helps clarify big O notation for those of you who are brand new to the idea. A few other resources I feel are really well-done: this <a href="http://pointlessprogramming.wordpress.com/2011/02/24/what-in-the-hell-is-big-o/">visual, real-world explanation</a> and this <a href="http://www.daveperrett.com/articles/2010/12/07/comp-sci-101-big-o-notation/">much more technical explanation</a>. I didn&rsquo;t include code in this post because these algorithms are all solved problems already and with some Google sleuthing, you will repos full of them in a multitude of languages. One more resource I like is the <a href="http://bigocheatsheet.com/">big o cheat-sheet</a>.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
</feed>
