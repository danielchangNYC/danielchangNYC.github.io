<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: matcher | Daniel Chang]]></title>
  <link href="http://danielchangNYC.github.io/blog/categories/matcher/atom.xml" rel="self"/>
  <link href="http://danielchangNYC.github.io/"/>
  <updated>2014-04-25T00:48:15-04:00</updated>
  <id>http://danielchangNYC.github.io/</id>
  <author>
    <name><![CDATA[Daniel Chang (couchpanda / c0depanda)]]></name>
    <email><![CDATA[daniel.chang85@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RSpec Custom Matchers: A Deep Dive]]></title>
    <link href="http://danielchangNYC.github.io/blog/2014/01/15/tdd2-RSpecMatchers/"/>
    <updated>2014-01-15T06:40:00-05:00</updated>
    <id>http://danielchangNYC.github.io/blog/2014/01/15/tdd2-RSpecMatchers</id>
    <content type="html"><![CDATA[<h1 id="whats-a-matcher">What’s a Matcher?</h1>

<p><code>expect(dan.current_zipcode).to eq(10002)</code></p>

<p>In the line above, the <code>matcher</code> is the method <code>eq</code> because RSpec will check to see if the value of <code>dan.current_zipcode</code> matches <code>10002</code>.</p>

<p>Let’s say that this was a line you wrote for as part of a test for a location tracking app. You want your code to be as clear as possible for collaborators or even for your future self.</p>

<p>Wouldn’t it sound even better if you could write this?</p>

<p><code>expect(dan).to be_in_zipcode(10002)</code></p>

<p>This requires <code>be_in_zipcode</code> to be a method in <code>RSpec</code>’s matcher library. I’m going to briefly explain how to create this new matcher, but for alternate explanations, check out the <a href="https://github.com/dchelimsky/rspec/wiki/Custom-Matchers">Rspec Github Wiki</a> and Chapter 7 of Aaron Sumner’s <a href="https://leanpub.com/everydayrailsrspec">Everyday Rails Testing with RSpec</a>.</p>

<p>My intention is not to write another Matcher tutorial (though this might inevitably happen). After reading Sumner’s chapter, I could imagine how matchers were created but ultimately, I felt a bit uncertain. With a little bit of <code>Pry</code> magic and doc-digging, I think I’ve finally put most of the puzzle together which I’m looking forward to sharing below! Constructive feedback and deeper insights are always welcome. :)</p>

<h1 id="match-maker-match-maker-make-me-a-match">Match-Maker, Match-Maker, Make Me a Match!</h1>

<p>Let’s write some code so that we can use the method <code>be_in_zipcode(10002)</code> from above.</p>

<p>General syntax at bare minimum first:
``` ruby syntax.rb
RSpec::Matchers.define :new_matcher_name do |expected|
  match do |actual|
    # Lines of code you want this matcher to run
  end</p>

<p>#optional description and failure message definition blocks
end</p>

<h1 id="from-the-describe-block">From the describe block:</h1>
<p># expect(actual).to matcher_method(expected)
```</p>

<p>NOTE: Store your matcher files in <code>spec/support/matchers/</code> and require them in <code>spec/spec_helper.rb</code> with the following line:</p>

<p><code>Dir[File.dirname(__FILE__) + "/support/**/*.rb"].each {|f| require f}</code></p>

<p>Now onto our example:
``` ruby be_in_zipcode.rb
RSpec::Matchers.define :be_in_zipcode do |zipcode|
  match do |friend|
    friend.in_zipcode?(zipcode)
  end</p>

<p># Optional failure messages
  failure_message_for_should do |actual|
    “expected friend to be in zipcode”
  end</p>

<p>failure_message_for_should_not do |actual|
    “expected friend not to be in zipcode”
  end</p>

<p># Optional method description
  description do
    “checks user’s current zipcode”
  end
end
```</p>

<p>Again, the failure messages and description are optional blocks. The match block is obviously mandatory. So now that we have our new matcher, let’s check out what’s going on behind the scenes.</p>

<h1 id="under-the-hood">Under the hood</h1>

<p><code>RSpec::Matchers.define :be_in_zipcode do |zipcode|</code></p>

<p>The <code>define</code> method, extended from the DSL module, does the following:</p>

<p>``` ruby define.rb RSpec::Matchers::DSL#define
def define(name, &amp;declarations)
  matcher_template = RSpec::Matchers::DSL::Matcher.new(name, &amp;declarations)
  define_method name do |<em>expected|    # =&gt; expected for us is the var zipcode
    matcher = matcher_template.for_expected(</em>expected)
    matcher.matcher_execution_context = @matcher_execution_context ||= self
    matcher
  end
end</p>

<h1 id="name--beinzipcode">name = be_in_zipcode</h1>
<p>```</p>

<p>The second line setting <code>matcher_template</code> initializes an <code>RSpec::Matchers::DSL::Matcher</code> object which stores the method name and the declarations block.</p>

<p><code>define_method</code> then creates the <code>be_in_zipcode</code> method. The next line’s <code>for_expected(*expected)</code> method sets the zipcode as the expected value and your failure messages/description from the matcher template in the second line. The messages and description are stored in the @messages attribute hash.</p>

<p>The next line I’m not sure about since <code>matcher_execution_context</code> refers to an attribute accessor. I don’t see it in the Matcher module either. Any insight here would be great!</p>

<p>Moving onto the last piece: the match block.</p>

<p><code>ruby
  match do |friend|
    friend.in_zipcode?(zipcode)
  end
</code></p>

<p><code>RSpec::Match#match</code> stores the given block in <code>@match_block</code>, so essentially, <code>@match_block = friend.in_zipcode?(zipcode)</code>. </p>

<p>Later, when you run your specs with the new matcher, the <code>match_block</code> will get called from the method <code>RSpec::Match#matches?</code>.</p>

<p><code>ruby matches?
def matches?(actual)
  @actual = actual
  if @expected_exception
    begin
      instance_exec(actual, &amp;@match_block)
      true
    rescue @expected_exception
      false
    end
  else
    begin
      instance_exec(actual, &amp;@match_block)
    rescue Spec::Expectations::ExpectationNotMetError
      false
    end
  end
end
</code></p>

<p>And that’s it!</p>

<p>So if I were to run the original line, <code>expect(dan).to be_in_zipcode(10002)</code>, the following would happen:</p>

<ol>
  <li><code>expect(dan)</code> returns an <code>RSpec::Expectations::ExpectationTarget</code> object storing the object <code>dan</code>. Specifically: <code>=&gt; #&lt;RSpec::Expectations::ExpectationTarget:0x007fbf511e4c78 @target=#&lt;User id: 1, name: dan&gt;&gt;</code></li>
  <li>the <code>to</code> method passes in <code>be_in_zipcode(10002)</code> and calls a method called <code>handle_matcher</code>…</li>
  <li>… which checks if <code>be_in_zipcode</code> has been defined as a matcher.</li>
  <li>Since we’ve defined <code>be_in_zipcode</code>, <code>matches?</code> gets called our block, which we saw above.</li>
  <li><code>handle_matcher</code> then figures out how to respond, given the messages you passed in when you defined the new matcher.</li>
</ol>

<p>That’s our deep dive into RSpec’s Custom Matchers. Again, feedback always welcome. Hope you enjoyed the complexity as much as I did! :)</p>

]]></content>
  </entry>
  
</feed>
